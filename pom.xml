<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

<!-- Parkit project information -->

<!-- Maven informations (details) : project manager , Project Id, Project version (here under development : SNAPSHOT), type of packaging (here jar) -->
  <groupId>com.parkit</groupId> 
  <artifactId>parking-system</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>


<!-- software dependencies : log4j, mysql, junit, mockito-->
  <dependencies>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>2.12.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>2.12.1</version>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.17</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.5.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.3.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>2.23.4</version>
      <!-- xxxxxxxxxxxxxxxx scope ? xxxxxxxxxxxxxxx -->
      <scope>test</scope>
    </dependency>
    <dependency>
    <groupId>com.github.spotbugs</groupId>
    <artifactId>spotbugs-annotations</artifactId>
    <version>4.2.3</version>
    </dependency>
  </dependencies>
<!-- These plugins will be executed during the build  -->
  <build>
    <plugins>
      <plugin>
      
     <!-- maven failsafe plugins added -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.0.0-M5</version>
        <executions>
          <execution>
          <!-- execution of integration test for covrage jacoco report -->
            <id>integration-tests</id>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <argLine>${failsafe.jacoco.args}</argLine>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
      <!-- maven site plugins added -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.9.1</version>
        <configuration>
          <argLine>${surefire.jacoco.args}</argLine>
        </configuration>
      </plugin>
      <plugin>
      <!-- maven surefire plugins added -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M5</version>
        <configuration>
          <argLine>${surefire.jacoco.args}</argLine>
        </configuration>
      </plugin>
      <plugin>
      <!-- maven assembly plugins added -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.3.0</version>
        <!-- the main class to execute in the manifest file -->
        <executions>
          <execution>
          <!-- combine project output into a single archive -->
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <archive>
                <manifest>
                  <mainClass>
                    com.parkit.parkingsystem.App
                  </mainClass>
                </manifest>
              </archive>
              <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
      <!-- maven jacoco plugins added -->
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.7</version>
        <executions>
          <execution>
          <!--preparation of the execution of unit tests -->
            <id>before-unit-test-execution</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
            <!-- directory to store the unit test coverage data -->
              <destFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</destFile>
              <propertyName>surefire.jacoco.args</propertyName>
            </configuration>
          </execution>
          <execution>
            <id>after-unit-test-execution</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
            <!-- coverage data file to generate the report from -->
              <dataFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</dataFile>
              
              <!-- directory to write the unit test report -->
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-unit-test-coverage-report</outputDirectory>
            </configuration>
          </execution>
          <execution>
          <!-- directory to store the integration test coverage data -->
            <id>before-integration-test-execution</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
            <!-- coverage data file to generate the report from -->
              <destFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</destFile>
              <propertyName>failsafe.jacoco.args</propertyName>
            </configuration>
          </execution>
          <execution>
            <id>after-integration-test-execution</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
            <!-- coverage data file to generate the report from -->
              <dataFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</dataFile>
              
              <!-- directory to write the integration test report -->
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-integration-test-coverage-report</outputDirectory>
            </configuration>
          </execution>
          <execution>
          <!-- a report based on both unit and integration test coverage. -->
            <id>merge-unit-and-integration</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>merge</goal>
            </goals>
            <configuration>
              <fileSets>
                <fileSet>
                <!-- directory to look for input to merge -->
                  <directory>${project.build.directory}/jacoco-output/</directory>
                  
                  <includes>
                  <!-- files to read in -->
                    <include>*.exec</include>
                  </includes>
                </fileSet>
              </fileSets>
              <!-- Directory where the merged coverage data will be written -->
              <destFile>${project.build.directory}/jacoco-output/merged.exec</destFile>
            </configuration>
          </execution>
          <execution>
            <id>create-merged-report</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
            <!-- merge test coverage data file to generate the report from -->
              <dataFile>${project.build.directory}/jacoco-output/merged.exec</dataFile>
              
              <!-- Directory where the merged test coverage will be written -->
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-merged-test-coverage-report</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
      <!-- maven jacoco version 0.8.5 plugins added -->
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.5</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
      <!-- spotbugs loading and launching to debugging unit and integration tests -->
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.2.0</version>
        <dependencies>
          <dependency>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs</artifactId>
            <version>4.2.3</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>3.0.0-M5</version>
        <reportSets>
          <reportSet>
            <id>integration-tests</id>
            <reports>
              <report>failsafe-report-only</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

</project>
